# Overview

-   [User Guide](user-guide/) for operating instructions or
-   [Technical Guide](technical-guide/) for architecture, customizing and self-hosting
-   [Licensing Guide](licensing-guide/) for licensing Whitebrick, supporting applications and libraries
# Licensing Guide

<!-- START:LICENSING ================================================== -->

Whitebrick is [licensed](https://github.com/whitebrick/whitebrick-cloud/blob/main/LICENSE) under the Apache License v2.0 however the dependencies use a variety of different licenses. We are working on a simple guide to outline the license information and options by use case - TBA.

<!-- END:LICENSING ================================================== -->
# Technical Guide

<!-- START:SUMMARY ================================================== -->

Whitebrick comprises a [front end Gatsby Jamstack](https://github.com/whitebrick/whitebrick) client and [back end Serverless](https://github.com/whitebrick/whitebrick-cloud) application (whitebrick-cloud) that adds multi-tenant DDL and access control functions to a [PostgreSQL](https://www.postgresql.org/) Database via the [Hasura](https://github.com/hasura/graphql-engine) GraphQL Server. The Jamstack client uses [AG Grid](https://ag-grid.com/) as a spreadsheet-like UI that reads/writes table data directly from/to Hasura over GraphQL. Additional functions (eg DDL and access control) are provided by whitebrick-cloud and exposed through the same Hasura endpoint using [Schema stitching](https://hasura.io/docs/latest/graphql/core/remote-schemas/index.html).

<!-- END:SUMMARY ================================================== -->

![Whitebrick Diagram](../assets/whitebrick-diagram.png)

## Front End Customization

TBD

## Back End Architecture

-   ### DAL

    With the bulk of persistence performed through Hasura, the DAL class is used for supplemental system-wide data persistence (tenants, users, roles, etc) and DDL (creating and altering schemas, tables, columns etc). This implementation has been purposely chosen as a lightweight alternative to ORM.

-   ### HasuraApi

    Hasura needs to know about any DDL changes to update the GraphQL schema - for example, when a new table is added it must be _tracked_. This class is used to call the [Hasura Metadat API](https://hasura.io/docs/latest/graphql/core/api-reference/metadata-api/index.html) over HTTP.

-   ### BgQueue

    API Gateway has a 30 second timeout so longer processes need to be executed in the background using the lambda invoke `event` type.

-   ### WhitebrickCloud

    This is the top-level API that makes calls to the DAL and HasuraAPI and is called by the GraphQL resolvers.

-   ### DB Schema

![Whitebrick DB Schema Diagram](../assets/whitebrick-db-erd.png)

## Back End Hosting

<!-- START:BACKEND_HOSTING ================================================== -->

### Deploying on a Cloud Service

-   AWS CloudFormation Stack - in progress
-   Heroku, Azure, DigitalOcean - TBD

### Running Locally

1.  #### Configure Postgres

    Create a new database in PostgreSQL and ensure `pgcrypto` is in the search path
    (see [Hasura requirements](https://hasura.io/docs/latest/graphql/core/deployment/postgres-requirements.html))

    ```
    CREATE EXTENSION pgcrypto;
    ```

    Make sure your database can be accessed from psql before proceeding (you may need to enable username/password authentication in pg_hba.conf)
    ie `$ psql -U <username> -h <host> -p <port> <db name>`

2.  #### Run Hasura

    Add the database credentials and run Hasura from [Docker](https://hasura.io/docs/latest/graphql/core/deployment/deployment-guides/docker.html#deployment-docker)
    or [Kubernetes](https://hasura.io/docs/latest/graphql/core/deployment/deployment-guides/kubernetes.html#deploy-kubernetes) and be sure to set a `HASURA_GRAPHQL_ADMIN_SECRET`.
    Launching Hasura will create data definitions and values in the `hdb_catalog` schema of the database.
    If Hasura does not launch check and debug your DB connection/permissions with psql.

    Our Docker file looks something like this:

    ```
    docker run -d -p 8080:8080
       -e HASURA_GRAPHQL_DATABASE_URL=postgres://db_usr:db_pass@host.docker.internal:5432/hasura_db
       -e HASURA_GRAPHQL_ENABLE_CONSOLE=true
       -e HASURA_GRAPHQL_DEV_MODE=true
       -e HASURA_GRAPHQL_ADMIN_SECRET=secret
       -e HASURA_GRAPHQL_UNAUTHORIZED_ROLE=wbpublic
       hasura/graphql-engine:latest
    ```

    Navigate to http://localhost:8080 and check the admin console is running (password is `HASURA_GRAPHQL_ADMIN_SECRET` from above)

3.  #### Install Hasura CLI

    [Install](https://hasura.io/docs/latest/graphql/core/hasura-cli/install-hasura-cli.html#install-hasura-cli) the Hasura CLI but do not init new config

4.  #### Configure .env File

    Copy `./.env.example` to `./.env.development` and complete with database connection parameters from (1) above.

5.  #### Create the wb Schema

    Change to the `./hasura` directory, copy `config-example.yaml` to `config.yaml` and complete with `HASURA_GRAPHQL_ADMIN_SECRET` from (2) above.
    This config is used for the Hasura CLI.
    Now create the whitebrick-cloud schema "wb" by running `$ bash ./scripts/apply_latest_migration.bash`.
    After the migration is complete, change to the `./db` directory and run `$ bash ./scripts/seed.bash` to insert the initial data.

6.  #### Run Serverless Listener

    Run `$ bash scripts/start_dev.bash` to start the serverless listener in local/offline mode. By default this listens to http://localhost:3000/graphql

7.  #### Track wb.table_permissions

    From The Hasura console, use the top menu to navigate to the "Data" page, click to expand the default database on the left, then click the "wb" schema.
    Click the "Track" button next to the "table_permissions" table.

8.  #### Add Remote Schema

    From The Hasura console, use the top menu to navigate to the "Remote Schemas" page, click add and enter the endpoint displayed from (6) above, check forward all headers and set and long time-out of 1200 seconds.
    **NB: If you are running Hasura in a local container you will need to use the corresponding URL** eg `http://host.docker.internal:3000/graphql`.
    If you now navigate to the "API" page from the top menu, In the query "Explorer" you should see queries beginning with `wb*`.

9.  #### Run Functional Tests

    Download [Karate](https://github.com/intuit/karate#getting-started) (the [stand-alone executable](https://github.com/intuit/karate/wiki/ZIP-Release) is all that is needed).
    Update `./test/functional/karate-config.js` with your Hasura endpoint URL from (2) above and then with Hasura running, change to the `./test/functional` directory and run the command `$ bash run_tests.bash`

    This creates a few test users and a small test schema `test_the_daisy_blog`. Whitebrick is designed for incremental building-out of databases whereas this testing creates a database all at once so it can take time to run - up to 10 minutes in some cases. If karate lags make sure Hasura and/or it's container has plenty of RAM.

    To then add additional test data (northwind, chinook and DVD databases) as a second step run `$ bash run_tests.bash importDBs` - this can take a additional 15 minutes. Or run `$ bash run_tests.bash withImportDBs` to run both in one hit.

<!-- END:BACKEND_HOSTING ================================================== -->

## Access Control

Whitebrick uses a simple Role-based access control (RBAC) model with each Role defining a set of permitted actions configured from the [policy.ts](https://github.com/whitebrick/whitebrick-cloud/blob/main/src/policy.ts) file. Currently only a standard default policy is provided but custom policy configuration will be supported soon.

The policy file actions are configured in JSON, for example the block below declares that only a Table Manager or Table Administrator may perform the `alter_table` action.

```

alter_table: {
roleLevel: "table",
description: "Alter this Table",
permittedRoles: ["table_manager", "table_administrator"],
}

```

### Role Levels

Every Role has one single corresponding level from the list below. The Role name is prefixed with the role level eg. `table_manager`

-   Organization
-   Schema (Database)
-   Table
-   TBD: Column (See Roadmap)

### Implicit Assignment

-   The assignment or removal of a User to a Role can automatically imply additional assignment or removal of Roles. For example, assigning a User the `schema_manager` Role implicitly assigns `table_manager` Roles for all of the tables within the schema.
-   Explicit assignment always takes precedence over implicit assignment. In the prior example, if the User had already been explicitly assigned the `table_administrator` for `TableA`, then that Role will remain unaffected for `TableA` and the User will be granted `table_manager` for all other tables.

**organization_administrator**

-   When assigning the `organization_administrator` Role to a User for an Organization, the Roles below are implicitly assigned to the User.
-   When demoting a User to `organization_user` or removing the User from the Organization, the Roles below are implicitly removed from the User.

1. `schema_administrator` for all Schemas **owned** by the corresponding organization
    - Any existing implicit Roles for the Schemas in are updated
    - Any existing explicit Roles for the Schemas in remain unchanged
2. `table_administrator` for all the Tables within the Schema in (1) above
    - Any existing implicit Roles for the Tables are updated
    - Any existing explicit Roles for the Tables remain unchanged

**organization_user`, `organization_external_user**

-   No implicit assignment for this Role.

**schema_owner**

-   A `schema_owner` is an alias for `schema_administrator` for the purpose of implicit assignment.

**schema_administrator**, **schema_manager**, **schema_editor**, **schema_reader**

-   When assigning any of the `schema_<role>` Roles to a User for an Schema, the Roles below are implicitly assigned to the User.
-   When removing the User from the Schema, the Roles below are implicitly removed from the User.

1. `table_<role>` for all Tables within the Schema
    - Any existing implicit Roles for the Tables within the Schema are updated
    - Any existing explicit Roles for the Tables within the Schema remain unchanged

**table_administrator**, **table_manager**, **table_editor**, **table_reader**

-   No implicit assignment for these Roles.

### Data Operations

| Table Role            | Select | Insert | Update | Delete |
| --------------------- | ------ | ------ | ------ | ------ |
| `table_administrator` | [x]    | [x]    | [x]    | [x]    |
| `table_manager`       | [x]    | [x]    | [x]    | [x]    |
| `table_editor`        | [x]    | [x]    | [x]    | [x]    |
| `table_reader`        | [x]    | [ ]    | [ ]    | [ ]    |

### DDL Operations

TBD
# User Guide

This document provides an overview of components used to build and manage a Whitebrick database.

---

## Organizations

Organizations are groups of Users. Every user can be a member of zero, one or multiple Organizations. A user does not need to be a member of an Organization to use the application.

An Organization has a `Label`, eg "_Vandelay Industries_", as well as an identifying `Name` used in the URL slug, eg "_vandelay_" in _https://whitebrick.com/vandelay_

### Organization Roles

Every User in an Organization has a Role in that Organization.

| Role Name                    | Permissions                                                                   |
| ---------------------------- | ----------------------------------------------------------------------------- |
| `Organization Administrator` | - Administrative access to Databases owned by the Organization                |
|                              | - Add/remove users to/from the Organization                                   |
|                              | - Promote/demote users to/from the `Organization Administrator` Role          |
| `Organization User`          | - Default user access to granted Databases owned by the Organization          |
| `Organization External User` | - Default external user access to granted Databases owned by the Organization |

An Organization must have at least one User with the `Organization Administrator` Role.

### Creating an Organization

Any User can create an Organization, for which they will be assigned the `Organization Administrator` Role by default.

1. On the left side of the Home screen click on the `+` button.
2. Enter a `Name` and `Label` on right-hand pane and click on the `Save` button.

### Editing an Organization

Only an Organization Administrator can edit an Organization.

1. On the left side of the Home screen, click on the name of the Organization you wish to edit.
2. Click on the pencil icon next to the name of the Organization in the center of the screen.
3. Edit the `Name` and/or `Label` on right-hand pane and click on the `Save` button.

### Deleting an Organization

Only an Organization Administrator can delete an Organization.

If the Organization is the owner of any databases, these databases must be transferred or deleted before the Organization is deleted.

1. On the left side of the Home screen, click on the name of the Organization you wish to delete.
2. Click on the trash icon next to the name of the Organization in the center of the screen.
3. Type the name of the Organization as confirmation and click on the `Delete` button.

### Viewing Users for an Organization

1. On the left side of the Home screen, click on the name of the Organization you wish to view.
2. Click on the `Members` tab in the center of the screen above the databases.

### Editing Users and Roles for an Organization

Only an Organization Administrator can edit Users and Roles for an Organization.

There must be at least one User with the `Organization Administrator` Role at all times.

Users must be signed-up to Whitebrick before they can be added to an Organization.

1. Follow the directions for Viewing Users in an Organization above.
    - To remove a user from the Organization click on the corresponding trash icon.
    - To leave an Organization (ie remove yourself) click on the corresponding exit icon.
    - To change the Role of a User select the new Role from the corresponding dropdown.
    - To add a new User click on the `+ Invite Users` button, search for the user by E-mail address, select a Role and click `Invite`.

---

## Databases

A Databases is a collection of Tables and User access Roles.

A Database is owned by either an individual User or an Organization.

### Database Roles

-   If a Database is owned by an Organization, administrators of the Organization are implicitly assigned the `DB Administrator` Role for the Database
-   If a Database is owned bu an individual User, that User will always have the `DB Administrator` Role for the Database
-   Database ownership can be transferred by any User with the `DB Administrator` Role

| Role Name          | Permissions                                 |
| ------------------ | ------------------------------------------- |
| `DB Owner`         | - Equivalent to the `DB Administrator` Role |
| `DB Administrator` | - Manage User access Roles                  |
|                    | - Create/edit/delete Tables and Columns     |
|                    | - Read and write records                    |
| `DB Manager`       | - Create/edit/delete Tables and Columns     |
|                    | - Read and write records                    |
| `DB Editor`        | - Read and write records                    |
| `DB Reader`        | - Read records                              |

### Creating a Database

A Database has a `Label`, eg "Sales", as well as an identifying `Name` used for back-end queries and the URL slug, eg "_sales_" in _https://whitebrick.com/vandelay/sales_

Any User can create a Database and will be assigned the `DB Administrator` Role by default.

1. On the top right side of the Home screen click on the `+` button and select `New Database`.
2. If the Database is to be owned by an Organization, select the Organization name from the dropdown menu on the right-hand pane, otherwise the Database will be owned by the current User.
3. Enter a `Name` and `Label` on right-hand pane and click on the `Save` button.
4. The new Database will display on the home screen under `My Databases` if created with a User owner or under the Organization name if created with an Organization owner

### Editing a Database

Only a DB Administrator or DB Manager can edit a Database.

1. From the Home screen, click on the name of the Database you wish to edit.
2. Click on the pencil icon next to the name of the Organization in the center of the screen.
3. Edit the `Name` and/or `Label` on right-hand pane and click on the `Save` button.

### Deleting a Database

Only a DB Administrator or DB Manager can delete a Database.

1. From the Home screen, click on the name of the Database you wish to delete.
2. Click on the trash icon next to the name of the Database in the center of the screen.
3. Type the name of the Database as confirmation and click on the `Delete` button.

### Viewing Users for a Database

1. From the Home screen, click on the name of the Database you wish to open.
2. Click on the `Members` tab in the center of the screen above the list of Tables.

### Editing Users and Roles for a Database

Only a Database Administrator can edit Users and Roles for a Database.

1. Follow the directions above for Viewing Users for a Database.
    - To remove a user from the Database click on the corresponding trash icon.
    - To leave a Database (ie remove yourself) click on the corresponding exit icon.
    - To change the Role of a User select the new Role from the corresponding dropdown.
    - To add a new User click on the `+ Invite Users` button, search for the user by E-mail address, select a Role and click `Invite`.

---

## Tables

A Tables is a collection of Columns, Rows (record values) and User access Roles.

A Table belongs to one Database only.

### Table Roles

| Role Name             | Permissions                  |
| --------------------- | ---------------------------- |
| `Table Administrator` | - Manage User access Roles   |
|                       | - Edit the Table and Columns |
|                       | - Read and write records     |
| `Table Manager`       | - Edit the Table and Columns |
|                       | - Read and write records     |
| `Table Editor`        | - Read and write records     |
| `Table Reader`        | - Read records               |

By default, implicit Table roles are assigned from the parent Database Roles.

| Database Role Name | Table Role Name       |
| ------------------ | --------------------- |
| `DB Owner`         | `Table Administrator` |
| `DB Administrator` | `Table Administrator` |
| `DB Manager`       | `Table Manager`       |
| `DB Editor`        | `Table Editor`        |
| `DB Reader`        | `Table Reader`        |

### Creating a Table

A Table has a `Label`, eg "Products", as well as an identifying `Name` used for back-end queries and the URL slug, eg "_products_" in _https://whitebrick.com/vandelay/sales/products_

Only a DB Administrator or DB Manager can create a new Table within the Database.

1. On the top right side of the Home screen click on the `+` button and select `New Table`.
2. Select the parent Database for which to create the Table within
3. Enter a `Name` and `Label` in the right-hand pane and click on the `Save` button.
4. The new Table will display on the Database screen under the `Tables` tab.

### Editing a Table

Only a Table Administrator or Table Manager can edit a Table.

1. From the Database screen, click on the name of the Table you wish to edit.
2. Click on the pencil icon next to the name of the Table in the center of the screen.
3. Edit the `Name` and/or `Label` on right-hand pane and click on the `Save` button.

### Deleting a Table

Only a Table Administrator or Table Manager can delete a Table.

1. From the Database screen, click on the name of the Table you wish to delete.
2. Click on the trash icon next to the name of the Table in the center of the screen.
3. Type the name of the Table as confirmation and click on the `Delete` button.

### Viewing Users for a Table

1. From the Database screen, click on the name of the Table you wish to open.
2. Click on the `Members` tab in the center of the screen above the list of Tables.

### Editing Users and Roles for a Table

Only a Table Administrator can edit Users and Roles for a Table.

1. Follow the directions above for Viewing Users for a Table.

    - To remove a user from the Table click on the corresponding trash icon.
    - To leave a Table (ie remove yourself) click on the corresponding exit icon.
    - To change the Role of a User select the new Role from the corresponding dropdown.
    - To add a new User click on the `+ Invite Users` button, search for the user by E-mail address, select a Role and click `Invite`.

---

## Columns

Columns are used to delimit data in Database Tables in a similar way to how columns are used in spreadsheets.

-   A Column has a `Label`, eg "Price", as well as an identifying `Name` eg "price" used for back-end queries.
-   A Column has a specific [Type](#data-types) and only values of that type are permitted.
-   A Column belongs to one Table only but can reference (link to) columns in other Tables using Foreign Keys.
-   One or more columns can be assigned as the Primary Key of the Table.
-   You can read more generally about [foreign and primary keys](https://www.educative.io/blog/what-is-foreign-key-database).

**Column Type**

A Column must be assigned a specific [Data Type](#data-types) and only values matching this type can be entered.

**Required Columns**

One or more Columns can be configured as Required (Not Null) to ensure the User enters a value before saving a record.

**Primary Keys**

One or more Columns can be configured as a Primary Key if they are used to uniquely identify the record. The Primary Key can then be used to reference the record from other Columns.

**Foreign Keys**

One or more Columns can be configured as Foreign Keys to reference corresponding values in other tables.

### Creating a Column

Only a Table Administrator or Table Manager can create a new Column for the Table.

1. Point your mouse over the header of the Table until the hamburger icon appears, click on it and select `Add Column`.
2. Enter a `Name` and `Label` and configure the Required, Primary Keys and Foreign Keys settings from the right-hand pane.
3. Click on the `Save` button and the new Column will display in the Table.

### Editing a Column

Only a Table Administrator or Table Manager can edit a Column.

1. Point your mouse over the Column header until the hamburger icon appears, click on it and select `Edit Column`.
2. Update the `Name` and/or `Label` and/or configure the Required, Primary Keys and Foreign Keys settings from the right-hand pane.
3. Click on the `Save` button and the new Column will display in the Table.

### Deleting a Column

Only a Table Administrator or Table Manager can delete a Column.

1. Point your mouse over the Column header until the hamburger icon appears, click on it and select `Delete Column`.
2. The Column will no longer be displayed in the table

## Data Types

| Data Type   | Description |
| ----------- | ----------- |
| `Text`      |             |
| `Integer`   |             |
| `Decimal`   |             |
| `Boolean`   |             |
| `Date`      |             |
| `Timestamp` |             |
